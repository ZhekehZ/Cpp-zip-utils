# This workflow checks out code, performs a Codacy security scan
# and integrates the results with the
# GitHub Advanced Security code scanning feature.  For more information on
# the Codacy security scan action usage and parameters, see
# https://github.com/codacy/codacy-analysis-cli-action.
# For more information on Codacy Analysis CLI in general, see
# https://github.com/codacy/codacy-analysis-cli.

name: Codacy Security Scan

on:
  push:
    branches: [ dev, master ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ dev, master ]
  schedule:
    - cron: '23 4 * * 6'

jobs:
  codacy-security-scan:
    name: Codacy Security Scan
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout code
        uses: actions/checkout@v2

      # Execute Codacy Analysis CLI and generate a SARIF output with the security issues identified during the analysis
      - name: Run Codacy Analysis CLI
        uses: codacy/codacy-analysis-cli-action@1.1.0
        with:
          tool: cppcheck
          # Check https://github.com/codacy/codacy-analysis-cli#project-token to get your project token from your Codacy repository
          # You can also omit the token and run the tools that support default configurations
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          verbose: true
          output: results.sarif
          format: sarif
          
          # Adjust severity of non-security issues
          gh-code-scanning-compat: true
          # Force 0 exit code to allow SARIF file generation
          # This will handover control about PR rejection to the GitHub side
          max-allowed-issues: 2147483647

      - name: Download Codacy-Clang-Tidy
        run: |
          wget -o tmp https://github.com/codacy/codacy-clang-tidy/releases/latest/download/
          version=$(cat tmp | grep Location | sed -E "s~Location: https://github.com/codacy/codacy-clang-tidy/releases/download/([^ ]*) \[following\]~\1~g")
          echo "CODACY-CLANG-TIDY VERSION: \"${version}\""

          wget https://github.com/codacy/codacy-clang-tidy/releases/download/${version}/codacy-clang-tidy-${version}
          if [ -f codacy-clang-tidy-${version} ]
          then
            echo "Success!"
          else
            echo "Download failed"
            exit 1
          fi
          chmod +x codacy-clang-tidy-${version}
      
      - name: Run Clang-Tidy
        run: |
          export PROJECT_TOKEN=${{ secrets.CODACY_PROJECT_TOKEN }}
          export COMMIT="$(git rev-parse --short HEAD)"

          echo "COMMIT SHA: ${COMMIT}"

          # 1. Run Clang-Tidy
          clang-tidy test/clang_tidy.cpp -extra-arg=-std=c++20 -- -Iinclude-extra-arg=-std=c++20 | \
          # 2. Convert the Clang-Tidy output to a format that the Codacy API accepts
          ./codacy-clang-tidy-${version} | \
          # 3. Send the results to Codacy
          curl -XPOST -L -H "project-token: $PROJECT_TOKEN" \
              -H "Content-type: application/json" -d @- \
              "https://api.codacy.com/2.0/commit/$COMMIT/issuesRemoteResults"

          # 4. Signal that Codacy can use the sent results and start a new analysis
          curl -XPOST -L -H "project-token: $PROJECT_TOKEN" \
            -H "Content-type: application/json" \
            "https://api.codacy.com/2.0/commit/$COMMIT/resultsFinal"

      # Upload the SARIF file generated in the previous step
      - name: Upload SARIF results file
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: results.sarif
