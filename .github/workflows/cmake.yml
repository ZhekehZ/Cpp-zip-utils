name: CMake

on:
  push:
    branches: [ master, dev ]
  pull_request:
    branches: [ master, dev ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    env:
      CC:   gcc-10
      CXX:  g++-10

    steps:
    - uses: actions/checkout@v2

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Get Conan
      uses: turtlebrowser/get-conan@v1.1

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      working-directory: ${{github.workspace}}/build
      run: cmake --build . --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --output-on-failure -C ${{env.BUILD_TYPE}}
  
  
  run-example-peoject:
    runs-on: ubuntu-latest
    
    env:
      CC:   gcc-10
      CXX:  g++-10
      CONAN_REVISIONS_ENABLED: 1
      
    steps:
      - uses: actions/checkout@v2
      
      - name: Get Conan
        uses: turtlebrowser/get-conan@v1.1
      
      - name: Add Conan remote
        run: conan remote add zhekehz-conan https://zhekehz.jfrog.io/artifactory/api/conan/zhekehz-conan
      
      - name: Build and run example
        run: |
          cd example
          cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
          cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
          tree ${{github.workspace}}/build
          ${{github.workspace}}/build/bin/example-project
